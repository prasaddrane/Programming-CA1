import bisect
student_data = [('00000020','Prasad', 'CSITMSC'), 
                ('00000021','Akash', 'CSITDIP'), 
                ('00000025','Paul', 'CSBAMSC'), 
                ('00000028', 'Abhishek', 'CSBADIP'),
                ('00000027', 'Saurabh', 'CSBADIP'),
                ('00000024', 'Golu', 'CSBADPI')]
student_updated_data = []
#student_name = ['Prasad', 'Akash', 'Paul', 'Abhishek', 'Saurabh']
#student_course_code = ['CSITMSC', 'CSITDIP', 'CSBAMSC', 'CSBADIP']

#student_number.sort()
#print(student_number)
#print(student_data)

#def qsort(student_data):
 #   if len(student_data) == 0:
  #      return []
   # else:
    #    pivot = student_data[0]
     #   lesser = qsort[(x for x in student_data[1:] if x < pivot)]
      #  greater = qsort[(x for x in student_data[1:] if x >= pivot)]
       # print(lesser + [pivot] + greater)
        
def quick_sort(sequence):
    length = len(sequence)
    if length <= 1:
        return sequence
    else:
        pivot = sequence.pop()
        
        
    greater = []
    lower = []
        
    for item in sequence:
        if item > pivot:
            greater.append(item)
        else:
            if item < pivot:
                lower.append(item)
    return quick_sort(lower) + [pivot] + quick_sort(greater)
print(quick_sort(student_data))

#print(quick_sort(student_data))

def register_student(sequence):
    global student_updated_data
    student_data.append(sequence)
    print("Student Data Before Sorting : "+str(student_data))
    student_updated_data = quick_sort(student_data)
    print("Student data after Sorting : "+ str(student_updated_data))
    
def retrive():
    #quick_sort(student_data)
    print(student_updated_data[0])
    del student_updated_data[0]
    print(student_updated_data)
    
    
